#!/usr/bin/env node
'use strict'
const fs = require('fs')
const path = require('path')
const http = require('http')
const https = require('https')
const url = require('url')
const redis = require('redis')
const LocalStore = require('node-localstorage').LocalStorage
var rclient
var xmpp
const os = require('os')
var helpers
var apiKeys = path.join(__dirname, 'api_keys.json')
var plugins = path.join(__dirname, 'plugins')
var teleURL = 'https://api.telegram.org/bot'
var runningPlugins = {}
var storage = {}
var pstorage = {}
const args = require('optimist')
    .usage('$0 [-i,-t,-x,-m] -n <nick> -s <server> -c <chan1>,<chan2>')
    .demand(['n'])
    .argv
var client
var channels
var chanCount = 0
var tokens = {}
const sdk = require('matrix-js-sdk')

if (os.platform() === 'openbsd') {
  var pledge = require('node-pledge')
  pledge.init('stdio flock proc rpath wpath cpath chown inet dns tty prot_exec fattr')
}

String.prototype.escapeHTML = function () {
  var htmlEntities = {
    '&': '&amp;',
    "'": '&#39;',
    '/': '&#x2F;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;'
  }
  return this.replace(/[&<>"'/]/g, function (s) {
    return htmlEntities[s]
  })
}

String.prototype.isHTML = function () {
  var isHTML = false
  if (this.match(/[&<>"'/]/)) {
    isHTML = true
  }
  return isHTML
}

rclient = redis.createClient(null, null, {
  auth_pass: process.env.REDIS_PASS
})

if (process.env.REDIS_PASS) {
  rclient.auth(process.env.REDIS_PASS, function (err, res) {
    console.log(err, res, 'authed with:', process.env.REDIS_PASS)
  })
}

var stat = fs.statSync(apiKeys)
if (stat.size > 0) {
  var data = fs.readFileSync(apiKeys, 'utf8')
  if (typeof data === 'string') {
    tokens = JSON.parse(data)
  }
}

rclient.on('error', function (err) {
  console.log('Error ' + err)
})

function safeCB (c) {
  try {
    c()
  } catch (e) {
    console.log(e, c.toString())
  }
}

helpers = {
  botname: args.n,
  path: __dirname,
  rand: function (len) {
    return Math.floor(Math.random() * len)
  },
  pHolder: function (str, array) {
    // lol - PHOLDER!
    var i
    var l = array.length
    for (i = 0; i < l; i++) {
      str = str.replace('$' + parseInt(i + 1, 10), array[i])
    }
    return str
  },
  httpGet: function (ur, opts, cb) {
    var u = url.parse(ur)
    var i
    for (i in opts) {
      if (opts.hasOwnProperty(i)) {
        if (!u[i]) {
          u[i] = opts[i]
        }
      }
    }
    if (ur.match(/https/i)) {
      https.get(u, function (res) {
        if (res.statusCode === 200) {
          var d = []
          res.on('data', function (chunk) {
            d.push(chunk)
          }).on('end', function () {
            safeCB(function () {
              cb(null, d.join(''), res)
            })
          })
        } else {
          cb(new Error('not a real thing'))
        }
      }).on('error', function (er) {
        safeCB(function () {
          cb(er)
        })
      })
    } else {
      http.get(u, function (res) {
        if (res.statusCode === 200) {
          var d = []
          res.on('data', function (chunk) {
            d.push(chunk)
          }).on('end', function () {
            safeCB(function () {
              cb(null, d.join(''), res)
            })
          })
        } else {
          cb(new Error('not a real thing'))
        }
      }).on('error', function (er) {
        safeCB(function () {
          cb(er)
        })
      })
    }
  },
  classifier: require('classifier'),
  isRelevant: function (msg) {
    if (msg.indexOf(this.botname) > -1) {
      return true
    }
    return false
  }
}

if (args.c) {
  channels = args.c.split(',')
  channels.forEach(function (c) {
    channels[chanCount] = '#' + c.trim()
    chanCount++
  })
}

function loadPlugin (file) {
  var n = file.split('/')
  n = n[n.length - 1]
  runningPlugins[n] = null
  require.cache[file] = null
  pstorage[n] = pstorage[n] || new LocalStore('./.pluginStorage_' + n)
  storage[n] = storage[n] || {}
  if (tokens[n]) {
    pstorage[n].setItem('token', tokens[n])
  }
  try {
    runningPlugins[n] = require(file)
  } catch (e) {
    console.log(file, e)
  }
}

function loadPlugins (dir) {
  var results = []

  // get all the files in the plugin dir recursively.
  var walk = function (dir, done) {
    fs.readdir(dir, function (err, list) {
      if (err) return done(err)
      var pending = list.length
      if (!pending) return done(null, results)
      list.forEach(function (file) {
        file = dir + '/' + file
        fs.stat(file, function (err, stat) {
          if (err) { return }
          if (stat && stat.isDirectory()) {
            walk(file, function (err, res) {
              if (err) { return }
              results = results.concat(res)
              if (!--pending) done(null, results)
            })
          } else {
            results.push(file)
            if (!--pending) done(null, results)
          }
        })
      })
    })
  }

    // Iterate each file
  walk(dir, function (err, results) {
    if (err) throw err
    var i
    var l = results.length
    var file

    for (i = 0; i < l; i++) {
      file = results[i]
      if (file.indexOf('~') === -1) {
        if (file.indexOf('.js') > -1) {
          loadPlugin(file)
        }
      }
    }
  })
}

loadPlugins(plugins)

fs.watch(plugins, function (e, file) {
  loadPlugins(plugins)
})

function teleSay (t, resp) {
  var turl = teleURL + tokens.telegram + '/sendMessage?parse_mode=Markdown&chat_id=' + t + '&text=' + encodeURI(resp)
  console.log(turl)
  https.get(turl, function (res) {
    console.log('statusCode: ', res.statusCode)
    console.log('headers: ', res.headers)

    res.on('data', function (d) {
      console.log(d.toString())
    })
  }).on('error', function (err) {
    console.log(err)
  })
}

function reply (t, frm, resp, proto) {
  t = t || frm
  proto = proto || 'irc'
  if (resp && t) {
    if (tokens.xmpp_user && proto === 'xmpp') {
      if (frm.match('conference')) {
        xmpp.send(frm, resp, true)
      } else {
        xmpp.send(frm, resp)
      }
    }
    if (args.t && proto === 'telegram') {
      console.log('sending %s "%s"', t, resp)
      teleSay(t, resp)
    }
    if (client && proto === 'irc') {
      client.say(t, resp)
    }
    if (authedClient && proto === 'matrix') {
      authedClient.sendHtmlMessage(t, resp, resp)
    }
  }
}

function processMsg (to, from, msg, proto) {
  if (to.match(args.n)) {
    return
  }
  proto = proto || 'irc'
  //console.log("to:\t%s\nfrom:\t%s\nmsg:\t%s\nproto:\t%s", to, from, msg, proto)
  Object.keys(runningPlugins).forEach(function (i) {
    try {
      msg = msg || ''
      runningPlugins[i].fn(helpers, to, from, msg, storage[i], pstorage[i], reply, proto)
    } catch (e) {
      console.log("Error running '" + i + "'\n" + e)
    }
  })
}

var authedClient
if (args.m) {
    // matrix.org
    // var ws = new WebStore({});
  var ws = new LocalStore('./webStorage')
  setTimeout(function () {
    function authClient (baseUrl, accessToken, uid, deviceId) {
      authedClient = sdk.createClient({
        baseUrl: baseUrl,
        accessToken: accessToken, // res.access_token,
        userId: uid, // res.user_id,
        deviceId: deviceId, // res.device_id,
        sessionStore: new sdk.WebStorageSessionStore(ws)
      })

      authedClient.on('RoomMember.membership', function (event, member) {
        if (member.membership === 'invite' && member.name === args.n) {
          authedClient.joinRoom(member.roomId).done(function () {
            console.log('Auto-joined %s', member.roomId)
          })
        }
      })
      authedClient.on('Room.timeline', function (event, room, toStartOfTimeline) {
        if (toStartOfTimeline || event.getType() !== 'm.room.message') {
          return
        }

        var from = event.sender.name || event.getSender()
        processMsg(room.roomId, from, event.getContent().body, 'matrix')
      })
      authedClient.startClient()
    }

    if (!tokens.matrix_access_token) {
      sdk.createClient('https://' + tokens.matrix_home_server).loginWithPassword(tokens.matrix_user, tokens.matrix_pass, function (err, res) {
        console.log('On login: Err %j, res %j', err, res)
// authClient("https://" + res.home_server, res.access_token, res.user_id, res.device_id);
        authClient('https://' + res.home_server, res.access_token, res.user_id, res.device_id)
      })
    } else {
      authClient('https://' + tokens.matrix_home_server, tokens.matrix_access_token, tokens.matrix_user_id, tokens.matrix_device_id)
    }
  }, 5000)
}

if (args.x) {
  var XmppClient = require('node-xmpp-client')

  xmpp = new XmppClient({
    jid: tokens.xmpp_user,
    pssword: tokens.xmpp_pass
  })

  xmpp.on('online', function () {
    console.log('xmpp online')
  })

  xmpp.on('error', function (err) {
    console.log(err)
  })

  xmpp.on('subscribe', function (from) {
    xmpp.acceptSubscription(from)
  })

  // var room = 'discussion@conference.' + srvr + '/' + args.n

  xmpp.on('groupchat', function (conference, from, message, stamp) {
    processMsg(null, conference, message, 'xmpp')
  })

  xmpp.on('chat', function (from, message) {
    processMsg(null, from, message, 'xmpp')
  })

  xmpp.connect({
    jid: tokens.xmpp_user,
    password: tokens.xmpp_pass
  })
}

// Telegram client
if (args.t) {
  http.createServer(function (req, resp) {
    if (req.method === 'POST') {
      var body = ''
      req.on('data', function (data) {
        body += data
// Too much POST data, kill the connection !
        if (body.length > 1e6) {
          req.connection.destroy()
        }
      })
      req.on('end', function () {
        try {
          var data = JSON.parse(body)
        } catch (e) {
          data = {}
        }
        if (data && data.message) {
          var msg = data.message.text
          processMsg(data.message.chat.id, data.message.from.first_name, msg, 'telegram')
          resp.writeHead(200, {'Content-Type': 'application/json'})
          resp.end('\n')
        } else {
          resp.writeHead(200)
          resp.end('\n')
          console.log(body, data)
        }
      })
    } else {
      resp.writeHead(200)
      resp.end('\n')
    }
  }).listen(8000, '127.0.0.1')
}

if (args.i) {
  const irc = require('irc')
  client = new irc.Client(args.s, args.n, {
    channels: channels,
    debug: false,
    userName: args.n
  })

  client.addListener('raw', function (msg, err) {
    //console.log(msg)
  })

  client.addListener('error', function (err) {
    console.log(err)
  })

  client.addListener('message', function (from, to, msg, tater) {
    console.log(client.nick, from, args.n, to)
    if (client.nick !== args.n) {
      console.log('changing nick from %s to %s', client.nick, args.n)
      client.send('NICK', args.n)
    }
    processMsg(to, from, msg, 'irc')
  })

  client.addListener('pm', function (from, msg) {
    processMsg(null, from, args.n + ':' + msg, 'irc')
  })

  client.addListener('invite', function (chan, from) {
    channels.push(chan)
    client.join(chan, function () {
      console.log('joined ' + chan + ' because ' + from + ' invited me')
    })
  })
}
